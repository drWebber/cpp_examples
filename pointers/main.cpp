#include <iostream>

using namespace std;

int main()
{
    /*Доступ к элементам структур и классов может осуществляться двумя операциями:
        1. операцией точки (.) - если доступ осуществляется через объект
        2. операцией стрелки (->) - если доступ осуществляется через указатель на объект
    */

    /*
        1. & унарная операция взятия адреса
        2. * операция разыменования указателя
    */

    /*
        объявление указателя
        тип данных  * имя указателя
    */

    int *x = new int(); // область действия x определяется областью видимости,
                        // но после выхода из области видимости память под
                        // указателем останется висеть занятой! */
    cout << "address: " << x << endl;		// выводится адрес, вроде 01473BC8
    cout << "value: " << *x << endl;    // значение не инициализировано, поэтому
                                        //выводится 0

    delete x; // освобождает область памяти под указателем

    cout << "address: " << x << endl;	// адрес остается прежним,
                                        // вроде 01473BC8
    cout << "value: " << *x << endl;    // предыдущее значение было освобождено
                                        // delete, теперь
                                        // здесь выведутся чужие данные, вроде
                                        // 40927616

    /* NULL — макрос нулевого указателя. При обращении к нему, макрос заменяется
     * на нулевой постоянной указатель.
     * Нулевой указатель, как правило, используется для обозначения того,
     * что указатель не указывает ни на какой объект.
     * В C++, макрос NULL расширяет значения:  0 и 0L. */
    x = NULL;
    if (x == NULL) {
        cout << "NULL" << endl;
    }

    int size = 3;
    int *arr = new int[size];

    int length = _msize(arr) / sizeof(arr[0]);
    cout << "arr length: " << length << endl;

    for (int i = 0; i < size; ++i) {
        arr[i] = i;
    }

    for (int i = 0; i < size; ++i) {
        cout << "i: " << i << endl;
    }

    delete[] arr;

    cout << arr[0] << endl; // теперь уже чужая память, вроде 50495872,
                            // вместо нуля


    return 0;
}
